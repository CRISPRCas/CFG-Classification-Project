{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "400334405033113321", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "000331133405003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "253304", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "40540330003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "423144131001242", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "34501", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "04033405403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "405403311334405033113321", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4403340540503321", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4405033440503321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "400334003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "144050321230300505351021540120", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4050033113311330403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "430101325524040120411", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "040334403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "040503311334403321", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "2251121523003", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "405403311330403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "40540330403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "04033113311330003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "401541200351101", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "04050334003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4405033040503321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "40033004050331140033321", "label": true, "llm_response": "```lark\nstart: s\ns: y y \"2\" \"1\"\nx: y \"1\" \"1\" y | s s | s x s | x \"3\" \"1\" \"1\" \"3\" | z \"0\" \"3\"\ny: z x \"3\"\nz: \"0\" | \"4\" \"0\" \"5\" | \"4\" | \"1\" x y x\n```\n```python\nparse_string(\"40033004050331140033321\")\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "110402054323", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "440334405033113321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4054033405403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4405033113311334003321", "label": true, "llm_response": "```lark\nstart: s\ns: x | y y \"2\" \"1\"\nx: y \"1\" \"1\" y | s s | s x s | x \"3\" \"1\" \"1\" \"3\" | z \"0\" \"3\"\ny: z x \"3\"\nz: \"0\" | \"4\" \"0\" \"5\" | \"4\" | \"1\" x y x\n\nstring: \"4405033113311334003321\"\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "40500331133405003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "1402343452", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "000334003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "305522231242521", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "00033405003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "405405033405003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "04033113304050033110405033321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "040503311330003321", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rule 's' defined more than once"}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4050033405003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "0405033405403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "0123043", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4003344033113321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "040334003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "40540503311334003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "1302115225422212142445021", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 's' defined more than once"}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "000334054033113321", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "24534435525", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "405403311330003321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "000331133040503321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "4405033405403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "405405033440503321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> Y Y 2 1\nX -> Y 1 1 Y | S S | S X S | X 3 1 1 3 | Z 0 3\nY -> Z X 3\nZ -> 0 | 4 0 5 | 4 | 1 X Y X", "string": "40500334403321", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zzzzzyxxzxyzyyyyzyyzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zxzyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yyxyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyyzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xzxyyyxzxxyyzxyzzzyzyyxzxxxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzyyxxzzxyxxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yxzxzyzzyxzyyzyyxzxxyyyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxxyxzyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzxxyyyxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yxyxxyzxyxxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyxxxxyyyyxyxzyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzxxxzxyzyzzyx", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'x' used but not defined (in rule s)"}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxzyyxyzzyyxzzxyyyyzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zzyxyxzxyzyzxyyyyzxxyxzxz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yxzyyxzyzyzzyxxyzzxyxxz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzyzxzxzzxxzyzxzyxxzxzzxxyxzxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxyyyxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyzxxxzyzzxxzyzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zxyzyxxxzxzyyyzxyyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxxxyyyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zzyxyyxzzzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyxzyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxxxyyyyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zyyzzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yyxyxxyyyzzxxzxzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yxxyzyyyxyxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxyzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zzxzxxzyxyzyxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxxyyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zzyyyyzyzyyyzzxxyxxzzxyyxyyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzxzxyyxyzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xzyyxyzxzxyzxxxxyzxyzyxyxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zzxxxzyzzxxxyzzyzyzyyzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxxz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xzzxz", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'x' used but not defined (in rule s)"}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzxxyzzzxxzxxzyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "zyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yzxyzxyyyyxyzzyxxxzxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xxxyxyxzyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "xx", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'x' used but not defined (in rule s)"}
{"cfg": "S -> x y | x | A x y x z | y | x S y y\nA -> S | y x A B | B B B x S | x\nB -> y | A y z y C | z C x y | z A y x | A A C\nC -> x S z S C | y y y | z A S", "string": "yxxzyyxxyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "00(0", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "10[[(([", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[][))1[1101()0[[][(((", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(]00])1[]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[()", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[]0[([(0[(0(0)[0)]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "1(0))]]1[10011[)000]0110((10", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[]1(]0))(1", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[0[)1[0[)1[()", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[1)1[", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[0)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(]0]]0)0)[1[(][(][[()[1(()]", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[]1])[([01[([[][]", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[]]))]]])]][]0(()", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": ")[[[1)[]1][]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "1(])0)0]][[1(]]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "0)[)(]1[[(1)0]", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('STRING', '\"( \"') at line 2, column 68.\nExpected one of: \n\t* RULE\n"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "((", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[(()", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(0[", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[(0)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(](]]]1])(010[", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "100[11[0[]([11[(0])[([0(](", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "00[", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "100(]()1[[[][[][", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "0[)1[(0[[10[[()(()", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(110[", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[(1))()0)(((((000()01)", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[(()[", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "((00)(][)]0](0", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": ")[[0[)1[()00[", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(0[(([)1[", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "0]1][])111111)10)(([[(1)])[", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "0])([]01[))]]])][1]]111[(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "]1)0(1)1[1[1)](1([0][[", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[0[)1[0[)1[0)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[0[)1[0)", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(00000", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RPAR', ')') at line 2, column 47.\nExpected one of: \n\t* _RBRA\n"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "1][]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "01)()[)]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "(1[)]10[]01((]11][)01(0", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": ")(01[()[(1)]001(", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in IF)"}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[[0[", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[0)[", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[([)1[()", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "))[0()(0(1[001(0)[1)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "[[1(00(()", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> IF [ | [ S S | THEN 0 IF | [ [ THEN )\nIF -> ) S 0 ELSE | IF | S WHILE | THEN 0 | LOOP\nTHEN -> ELSE | 1 ELSE IF ELSE THEN\nELSE -> ( | LOOP S | ( THEN | 0 | WHILE [ ELSE\nWHILE -> 0 0 LOOP 1 LOOP | ELSE [ ) 1\nLOOP -> S", "string": "([)1[00)[[0[)1[0)0(0", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('STRING', '\"(\"') at line 2, column 68.\nExpected one of: \n\t* RULE\n"}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzzzxxyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xyyxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yzxxxyyyzzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xxxyzyzzxyyxxyyy", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzzxxyzyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zyyxxzyzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zxxyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zxyzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzyyxxyyyzyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yxxxyxxyzyxz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xyzzyxxzzxyzxxxyyyxyyzyyxzzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yxyyxxzzzzyxzxzyzyxxyxxyxzyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzzxxyzzx", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('c') in A)"}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xyxyyxzxxzzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yzzyxyzxyxxyyzyyyyxyzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yyzzzzyzzyzzzzyzyxzxzyzyzyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xxyxxzzyzyxzxzzzzxxzyzyzxxzxyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xzzzyzyxzyzzyxxzyyzxxyzzyxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zxxxyzzxzyzzxxxyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yxyzxxxxyyyyyxzxxzzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xxyzyzzx", "label": true, "llm_response": "```lark\nstart: s\ns: \"z\" s | b a b \"x\" s | c \"z\" \"z\" \"x\" | \"x\" s a | b\na: \"x\" \"x\" \"y\" | \"y\" \"y\" a \"y\" \"y\" | a c a | s | \"x\" s b \"z\"\nb: \"z\" \"z\" s\nc: b b c s \"z\" | \"x\" \"x\" \"y\" | b c \"z\" \"z\" | a \"z\" \"y\" | c c a \"z\" a\n```\n```python\nparse_string(\"xxyzyzzx\")\n```\nFalse", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzxxxxzxyyyxyxyzzyyzyyyxxxz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzzzzxxyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zyzzyxxxxxxzyyyxzzxxyzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zxzxxyzxxzyxzxxzyxxzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yyzxyzxzyzxxxxxyyxzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xxxyzzxxxy", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yyzyyyyyxxyxzxzzxxzxyzzyxxz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xyyxxyyyzyzzxxxy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yzxzyyzzyzzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yzyyzxzxzyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xzyzzzzyzxxxzzzyxzyxzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzzxxxzyxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xyzzzzzzyyzyzxyzxxzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zxzxzyzxzzxzxxzxxzyzzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yzzyxyzyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xyxxzxyyxxyzyxyzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xxzxyyxxyzxyxxxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzxxyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yyzzzzzyxxzxyyyxzzxxzzxxzxxxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zxzzzyxzzzyyxzxzzzxxxzyyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yyxzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yxxyxxxzxzyzxxzz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "xxyzzx", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzxxyzyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "zzzzzzzzzxxyzzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> z S | B A B x S | C z z x | x S A | B\nA -> x x y | y y A y y | A C A | S | x S B z\nB -> z z S\nC -> B B C S z | x x y | B C z z | A z y | C C A z A", "string": "yyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+(-)(@@+)-)-/+-(@)@/+()/", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / (ALPHA | \"+\" \"GAMMA\" )\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@)@)@++(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / ( \"ALPHA\" | \"+\" \"GAMMA\" )\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@++(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+)/(+)/(@++@(@)@)@)@)-", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" | \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+)--+)-@@(+(())@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+@)@)@)@)", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_NL', '\\n') at line 4, column 48.\nExpected one of: \n\t* _RPAR\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+@)(@)@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+@)@)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@@+(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" \")\" | \"GAMMA\" \"+\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+@)@)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@)@++@)@)@(@+(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" \"|\" \"+\" \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@@)@+)-+(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+@@)(@)(/)//@)))+-/", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "++@@)@+)-@@(@)@)-@)@(@@(@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 46 in <string>: \n\n: \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\"/\"(\" \"ALPHA\" | \"+\" \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "/@+@-@-+)+@/+(-/+@", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 49 in <string>: \n\nGAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \" + \" \")\" / ( \"ALPHA\" | \" + \" \"GAMMA\" \")\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/@@)-", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@)@)@)@)@)@)@)@)@++(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": ")@(@(()+", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" \"|\" \"+\" \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "/+-@@(-)/-+)(+-++((+@", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" | \"+\" \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+@)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+)+//)+@-)((@@-@@/+@)(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+//@)@@(-(-(--+/+@++(+-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "-+@-/@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@+)-(@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@+@)@)+(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@++@@)@(@@)@)@(@+(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" | \"+\" \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@-@))@+-(@+)(@@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+)/(+)/(@", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+)/(+)/(+)/(+@)@)(@)@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+++-(++))(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@+()@-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+)/(+)/(@+)-(@)@)@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "/@-@(/)(", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unterminated string starting at: line 1 column 17 (char 16)"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@++(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_NL', '\\n') at line 4, column 56.\nExpected one of: \n\t* _RPAR\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "/+(--+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@)@)@+@)@))-(@)@)@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@(@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "(/((+@//@////-//(-@/)(/(@/@", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 47 in <string>: \n\n \"GAMMA\" \"BETA\" \")\" \"-\" | \"@\" | \"+\" \")\" / \"(\" \"ALPHA\" | \"+\" \"GAMMA\" \")\"\n                                        ^\n"}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+)/(@", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+)/(@+)-", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "/+@()+(@+)/+-)-((/)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "/()@-(@@+++))/)+/++", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/+)/(+)/(@+)-", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "-)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "--/@+)-", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "---//)+-(@++-)/-//+//(@+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+@)@)@)(@)@)@-)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "@)@)@++(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> GAMMA BETA + ( | ALPHA ( GAMMA - ) | BETA | - - / ALPHA\nALPHA -> GAMMA BETA ) - | @ | + ) / ( ALPHA | + GAMMA )\nBETA -> ALPHA | + | BETA BETA GAMMA ( GAMMA\nGAMMA -> @ | GAMMA ) @", "string": "+@)@+)-@)@)@)@)@)@(@)@", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yxyyyx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyxxzxzxyzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyyy", "label": true, "llm_response": "```lark\nstart: s\ns: a | a a | s | \"x\" | \"y\" c s \"z\"\na: \"x\" b c \"y\" \"y\" | c \"x\" \"y\" s \"x\" | b\nb: \"y\" \"y\"\nc: \"y\" | \"x\" \"x\" \"z\" b\n```\n```python\nparse_string(\"yyyy\")\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zzxyyxzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxxzyyxyxxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxxzyyxyxyyxxzyyyyxyyyyyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyxxzyyyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zxxxyzxzzxyxyxzyyyzyzyxyzxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zyyzyzzyxzzxyxxyxyxyxzyyyyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zzxxyyxxyyyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xxzzzzyxyzyyxxyzzyxxzyzzyxyzyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xxzyyxyyyyxyyxxzyyxyyyyyzxx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xzzyxzyzzyxzxxyzyyxxy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zzxyxyxyxyyzzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xzzyyyzyxxxxxxzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zxzzxxyyxzyxxzyyzyzyyzyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyxxzyyyyxyyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xzxzxzzyxyyzxyxyyxyzxzxyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yxyxyyyyyxyyxxzyyyyx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xxyx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyxxzyyyyxyyxxzyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyxxzyyyyyxyyyyyzx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xxzyyxyxyyyyyxyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zyyyyzyxzxxzxyzy", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 's' used but not defined (in rule start)"}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyyxzxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yxxzyyyxyxxz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyxxzyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yzzxyzzyxxxxxzxyxyzxyxxx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yxyxxzyyxyyyyxxzyyyyyyxzzzzxx", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rule 's' used but not defined (in rule start)"}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxxzyyxyxxyyz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zyzxyzzxyzxzxxzxzyyzxxyxzxzx", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xyyyyyxyyxxzyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yxxzyyyyz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyyyz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xzxyyzyxyyzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zyxyxxzzyxxzzxyzzyy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yxyyyyxxzyyxyyxxzyyyyzzxyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyyyxzz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "zxzyyzxyxzyzzzxzzxxzyz", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xxzyyxyxx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "xxzyyxyxxyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxyyxxzyyyy", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxzxzzxxxxxyzxzzyxzxzy", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyxyyxxzyyyyz", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> A | A A | S | x | y C S z\nA -> x B C y y | C x y S x | B\nB -> y y\nC -> y | x x z B", "string": "yyyxyyyxxzyyxyyyxyyyyyzxx", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "322", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "301544453334522535421233001143", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "23", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "25", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "00013401305020254354", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "235530052452305342244", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "231324", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "322535", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "2153", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "23330350", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32215", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32253", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\n```python\nparse_string(\"32253\")\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "322535332232253305", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32253232253151515", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "53555235032215553305153", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "533015", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "535", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\ntrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "41353503145202", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "1401040540205325502432531114", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "21553222515151531515323222150", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32233035015", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "34003513135502304045002302435", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "5315515335322322322", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32235032232255350555151522", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "5350", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "2355322331503", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "53", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "3223", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32255515", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "3122215401442400034", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "2333", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "01430", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "3225", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "530301553115532310200551513545", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "4245404105553000305353", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "25330", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "3225232233", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "41", "label": false, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\n```python\nparse_string(\"41\")\n```\nFalse", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "34225510323", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "035150124011432213123430", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "432312352", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32255225", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "322533322322205535", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "5335", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "515", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "00414400331202510452215542", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "55", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "51515153222153", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "32251515", "label": true, "llm_response": "```lark\nstart: s\ns: s y | x\nx: s \"1\" \"5\" | \"5\" | s \"3\" z \"0\" | \"2\" | \"3\" \"2\" \"2\"\ny: z\nz: \"5\" | \"3\" | x x s\n```\nTrue", "llm_parsed_result": true, "error": null}
{"cfg": "S -> S Y | X\nX -> S 1 5 | 5 | S 3 Z 0 | 2 | 3 2 2\nY -> Z\nZ -> 5 | 3 | X X S", "string": "23322232215", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "11)]1)01[[(01[1]0110(11", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "(111([0[[1]]10](11)1]])0][)](", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1()(([)10]11[(()[0(][))[](][(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1)1)]1))(1]1)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "(]([[][[1]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "][)([]]0(01)1()[", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1]1)(1)]1))01[1]0]]11", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 7 column 40 in <string>: \n\nloop: \"[\" \"(\" \"THEN\" \"1\" \"WHILE\" | \"1\" \"}\n                                       ^\n"}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "])[0001)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[])11([1[1]1[]0(0(]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "11)]1))1", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]0(](]]1[])101)1", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]]1", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "((1())0[10])0]))][[0]0[])", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "0])(]1)(0100)[1]00[)(][11[[[)1", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1)1]1))", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[((1[01", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[]0]1", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[0111]))(11", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "(0", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RBRA', ']') at line 2, column 7.\nExpected one of: \n\t* _NL\n"}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1)1))", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1]1)(11", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1]1)1", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "(0[(0[]1)[)((10)))((0]][]101", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "01[1]0", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "0[10])]1)111)]))1)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "101[[()110(11", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1]0(([001])000]](", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "11)1)]1))(1]1)1", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]0(0]0011)(]]01[0]][1[100)]())", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": ")0))][0((1]0)0[1]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1)]1)(11)01[1]0(1)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]]]][)(0(1[[[0)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1)01[1]0(1)]]11", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Empty terminals are not allowed (\"\")"}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[]][][]([][0)(]]1]](0)01[", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Empty terminals are not allowed (\"\")"}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]])[]((([[]](0]0))][[]1111)", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "'input_string'"}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1]1(01][0]0", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1)]1))", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "1)]1)1)01[1]0(1)(11))", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]010(()[]((0])0[1)](1((0)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "11)]1)01[1]0(1(11", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "100])1]0[)[]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1)101[1]0)", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "100]]]", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[1](01])00))1[)((010[10][0", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Empty terminals are not allowed (\"\")"}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "11)]1)01[[()1101", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "]1)(11))", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "101[[(01[[()1101101", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "[)([)00]]()", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> ] ] 1 | THEN | IF 1 THEN ) | WHILE ELSE 1\nIF -> ELSE ( WHILE | ] 1 )\nTHEN -> ELSE | )\nELSE -> 0 WHILE [ LOOP 0 | IF | ) IF THEN S | WHILE ) IF THEN | ELSE ( ELSE ELSE S\nWHILE -> 1\nLOOP -> [ ( THEN 1 WHILE | 1 ]", "string": "101[1]01", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Expecting a value, at line 7 column 42\n\noop: \"[\" \"(\" \"THEN\" \"1\" \"WHILE\" | \"1\" \"\"}\n                                        ^\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(((@+(+-@+++-(()((", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(@++-((", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'alpha' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "+(@+/(((((", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "(@(@((-+@+-()@(/@@(@@)@/(-+@+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "((@)(+-((/", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "-)(+-/+)-//(@+/+@@/)(-/@-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "-@-())@+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/@@/@@+-@+)(((/", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "//@+//-))-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "))/(+-/@+/", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'g' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": ")@@((", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_NL', '\\n\\n') at line 5, column 60.\nExpected one of: \n\t* _RPAR\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "(((@+(((", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "(+-(+)(((/", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'b' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": ")@-(/(/(-@(/+-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(+-@+@+(((", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/@@/@@(+-()((+-(", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "()(((/", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "))@/--@+/+)/-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/@@()(((/", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RPAR', ')') at line 2, column 54.\nExpected one of: \n\t* _NL\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-@++-+-(", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(+-+-(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('TERMINAL', 'A') at line 3, column 5.\nExpected one of: \n\t* _LBRACE\n\t* _COLON\n\t* _DOT\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "(+-(+-(", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "-()-/@-+/-(@/)(+(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-(+-(", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/@@(/(+-+-+(+-(()+-(((", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/((+-(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('TERMINAL', 'A') at line 3, column 5.\nExpected one of: \n\t* _LBRACE\n\t* _COLON\n\t* _DOT\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(@++-((@+(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 16 in <string>: \n\nb: \"@\" | \"(\" s @ \" + \" | \"(\" s s \"+\" | s | a @ \n               ^\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "(+-+-()(+)(((/", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/((+-+-+(+-+-(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('RULE', 'a') at line 3, column 6.\nExpected one of: \n\t* _LBRACE\n\t* _COLON\n\t* _DOT\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "-)/)-@+/@", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'alpha' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": ")@/-@+)(+@)-/(-+((", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "+-)(((/", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/@@/(@++-((", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_NL', '\\n') at line 5, column 60.\nExpected one of: \n\t* _RPAR\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "(((+@-)/(+@-)(/+/+--@+)+(@+", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'b' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "--/()@-(+/)@-(())@(/@-(((-", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'alpha' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-@+(+-@++-(", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-((+-(@(", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/))-((+@)-()/@(/(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "+-@+)+-((/", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(((++-((", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/(@+(+-(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('TERMINAL', 'A') at line 3, column 5.\nExpected one of: \n\t* _LBRACE\n\t* _COLON\n\t* _DOT\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": ")(-@@/(-()+++-+@@+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-+-((((+(", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 3 column 5 in <string>: \n\nalphа: \"(\" s gamma alpha \"(\" | gamma \"(\" | b\n    ^\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": ")@+(++@-@+-/(/", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-@+(((", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'alpha' used but not defined (in rule s)"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": ")++(-+-//+(--)(+-)", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "'input_string'"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "++-/@@(+-((((((+-+", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "-()/+-))-)+)-/@/(+@()", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "((@)((@+((/", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected input at line 2 column 177 in <string>: \n\n\"-\" s \")\" s | \"(\" beta \")\" alpha | beta @ | gamma @ \"+\" | \"(\" gamma gamma \"+\" | \n                                        ^\n"}
{"cfg": "S -> / @ @ S | + BETA S GAMMA | BETA ) ALPHA ( / | ( ALPHA ALPHA | / BETA GAMMA GAMMA (\nALPHA -> ( S GAMMA ALPHA ( | GAMMA ( | BETA GAMMA ALPHA | - S ) S\nBETA -> ( S @ | GAMMA @ + | ( GAMMA GAMMA + | GAMMA | ALPHA @\nGAMMA -> ( | ( BETA | ALPHA ) ( | + - | S ) GAMMA", "string": "/+-+-((", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@(@)+/+(/(++@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@@)(@@)+/-/)-()/-/@-((@+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "--()@)+@(//+/+/", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(/@+--", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": ")-@()/((+(((+-(@+()//((@@+", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('STRING', '\"ALPHA\"') at line 3, column 1.\nExpected one of: \n\t* _NL\n\t* _OVERRIDE\n\t* _IGNORE\n\t* RULE_MODIFIERS\n\t* _IMPORT\n\t* TERMINAL\n\t* $END\n\t* RULE\n\t* _EXTEND\n\t* _DECLARE\n"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "/@)-(@(@)(()@-", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@-@@)/)+-)-@@-///", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(+@//+@+--(/+/+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "((@@)+(@))+@@)@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+)+++/+-(@/--+/+", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+-+@/)-@@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+@//+@)@-()@()-/()(+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+)/-/+(/)/@+@@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@@(@)@@@)+", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@/@+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@)+(@))+@(@))+", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@@(@)+@(@))+(@))+)@", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@))+@@@)+@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@)+@@)@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": ")(@-@@@@(+)-)/-@@()(/((@)--))+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+++@+(@)))(+", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@))+", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@-+@+/)))/-+-@@()+))+)/", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "((@)+@(@))+", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(/))(@))+/@@)+@)+@)@@)+", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@/)-@+/(/@-)@-/", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "'grammar'"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@@)+@)@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "((@@@)+@)+(@))+@)@@@(@))+", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@--@-/+/+(@)+)@-@)", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@)+@@(@))+@", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "/)/-(/)@(()/)(/@", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "---)(@)(-/-+/)((", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RPAR', ')') at line 2, column 9.\nExpected one of: \n\t* _NL\n"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@/))@/@@@(@))+", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "((@)+@@)+@)+)@@)+(@))+@)@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rule 'alpha' used but not defined (in rule s)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "((@))+@@)+(@))+@)@@)+", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RPAR', ')') at line 2, column 9.\nExpected one of: \n\t* _NL\n"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "/(()-/+()/)(+/))-)+)(", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "))+(/(-(/@)(", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@@@)@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": ")/", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@))+((@@)+@)+@@(@))+@@)+@@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RPAR', ')') at line 2, column 9.\nExpected one of: \n\t* _NL\n"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@(@@(@))+@)+", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "/())())-@/+@@(/", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "-+/+@(--)))/(--)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+@", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@))+(@))+@)+@)+@", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(@))+(@))+@@(@))+)@)@", "label": true, "llm_response": "True", "llm_parsed_result": true, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "+)", "label": false, "llm_response": "False", "llm_parsed_result": false, "error": null}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "(+-/-)+/--@", "label": false, "llm_response": null, "llm_parsed_result": null, "error": "Rules aren't allowed inside terminals (NonTerminal('s') in ALPHA)"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@)+", "label": true, "llm_response": null, "llm_parsed_result": null, "error": "Unexpected token Token('_RPAR', ')') at line 2, column 9.\nExpected one of: \n\t* _NL\n"}
{"cfg": "S -> BETA ) + | @ | S S S ALPHA @\nALPHA -> ) | S\nBETA -> @ | ( GAMMA S S BETA | ( @ )\nGAMMA -> @ GAMMA BETA | / ALPHA ALPHA ALPHA / | ( | S", "string": "@@(@))+@@", "label": true, "llm_response": "False", "llm_parsed_result": false, "error": null}
